buildscript {
  ext {
    commonsIoVersion = "2.8.0"
    jcommanderVersion = "1.81"
    jacksonVersion = "2.12.2"
  }
}

plugins {
  id "org.springframework.boot" version "2.4.5"
  id "java"
  id "idea"
  id "application"
  id "maven-publish"
  id "io.freefair.lombok" version "5.1.1"
  id "pl.allegro.tech.build.axion-release" version "1.14.2"
}

scmVersion {
  tag {
    prefix.set("v")
    versionSeparator.set("")
    branchPrefix.set([
            'release/.*': 'release-v',
            'hotfix/.*' : 'hotfix-v'
    ])
  }
  nextVersion {
    suffix.set("SNAPSHOT")
    separator.set("-")
  }
}

repositories {
  if (project.hasProperty('jenkins-ci')) {
    maven {
      url "${System.properties['nexus.url']}/repository/cognizone-group"
      credentials {
        username = System.properties['nexus.username']
        password = System.properties['nexus.password']
      }
      allowInsecureProtocol(true)
    }
  }
  mavenLocal()
  mavenCentral()
  maven { url "https://plugins.gradle.org/m2/" }
  maven { url "https://repo.spring.io/release" }
}

lombok {
  generateLombokConfig.enabled = false
}

sourceCompatibility = JavaVersion.VERSION_11
targetCompatibility = JavaVersion.VERSION_11

group = "zone.cogni.tool.foldersyncotron"
project.version = scmVersion.version

compileJava.options.encoding = "UTF-8"
compileTestJava.options.encoding = "UTF-8"

idea {
  project {
    jdkName = '11'
    languageLevel = '11'
  }
}

application {
  mainClass = "cogni.zone.tools.foldersyncotron.app.FolderSyncotron"
}

dependencies {
  implementation("commons-io:commons-io:${commonsIoVersion}")
  implementation("com.beust:jcommander:${jcommanderVersion}")
  implementation("com.fasterxml.jackson.core:jackson-core:${jacksonVersion}")
  implementation("com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}")
  implementation("com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}")
}

publishing {
  publications {
    mavenJava(MavenPublication) {
      groupId = group
      artifactId = 'foldersyncotron'
      version = scmVersion.version
      artifact(bootJar)
    }
  }
  repositories {
    if (project.hasProperty("publishToCognizoneArchiva")) {
      maven {
        credentials {
          username = System.properties['archiva.username']
          password = System.properties['archiva.password']
        }
        name = 'cognizone'
        url = System.properties['archiva.url']
      }
    }
    if (project.hasProperty("publishToCognizoneNexus")) {
      maven {
        credentials {
          username = System.properties['nexus.username']
          password = System.properties['nexus.password']
        }
        def releasesRepoUrl = "${System.properties['nexus.url']}/repository/cognizone-release"
        def snapshotsRepoUrl = "${System.properties['nexus.url']}/repository/cognizone-snapshot"
        url = version.endsWith('SNAPSHOT') ? snapshotsRepoUrl : releasesRepoUrl
        allowInsecureProtocol(true)
      }
    }
  }
}
